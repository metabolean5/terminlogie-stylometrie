La génération du langage naturel pour le dialogue oral homme-machine pose des contraintes spécifiques, telles que la spontanéité et le caractère fragmenté des énoncés, les types des locuteurs ou les contraintes de temps de réponse de la part du système. Dans ce contexte, le problème d'une architecture rigoureusement spécifiée se pose, autant au niveau des étapes de traitement et des modules impliqués, qu'au niveau des interfaces entre ces modules. Afin de permettre une liberté quasi-totale à l'égard des démarches théoriques, une telle architecture doit être à la fois modulaire (c'est-à-dire, permettre l'indépendance des niveaux de traitement les uns des autres) et portable (c'est-à-dire, permettre l'interopérabilité avec des modules conçus selon des architectures standard en génération du langage naturel, telles que le modèle RAGS - « Reference Architecture for Generation Systems »). Ainsi, dans cet article on présente de manière concise l'architecture proposée, la comparant ensuite au modèle RAGS, pour argumenter les choix opérés en conception. Dans un second temps, la portabilité de l'architecture sera décrite à travers un exemple étendu, dont la généralité réside dans l'obtention d'un ensemble de règles permettant de plonger automatiquement les représentations des informations de notre architecture vers le format du modèle RAGS et inversement. Finalement, un ensemble de conclusions et perspectives clôturera l'article. Natural language generation for human-computer dialogue imposes specific constraints, such as the spontaneous and fragmented character of the utterances, speaker types or constraints related to the system's time of response. In this context, the issue of a thouroughly specified architecture stems naturally, with respect to the processing stages in the modules involved and to the interfaces between these modules as well. In order to allow for a quasi-total freedom concerning the theoretical principles driving the processing stages, such an architecture must be modular (i.e., allowing the independence of the modules of each other) and portable (i.e., allowing a certain interoperability between modules designed following this architecture and existing modules, designed following standard, reference architectures, such as the RAGS model). Thus, in this paper firstly the proposed architecture will be presented in a concise manner, comparing it then to the RAGS model and arguing for the design choices being made. Afterwards, the portability of the architecture will be described, via an extended example whose general character resides in the fact that a set of rules are obtained, that allow automatic translations between representation formats in our architecture and in the RAGS model, in both ways. Finally, a set of conclusions and pointers to further work end up the paper. génération, dialogue, architecture modulaire, portabilité, XML. generation, dialogue, modular architecture, portability, XML.  Nos recherches se situent dans le cadre de la génération du langage naturel pour le dialogue oral  homme-machine et concernent le développement d'un module de génération du langage naturel pour donner un caractère aussi « naturel » et expressif que possible aux réponses langagières du système face aux requêtes des usagers. Ce travail poursuit ainsi des recherches commencées depuis plusieurs années (Imberdis & Caelen, 1997). Le problème n'est pas simple, car la plupart des générateurs textuels existants sont conçus pour des situations de monologue, et il s'y ajoutent le caractère spontané et fragmenté du dialogue, auquel des contraintes de pertinence, expressivité et temps de réponse se conjuguent (McTear, 2002). Ainsi, nous considérons (Popescu et al., 2007) que la réponse du système se situe à cinq niveaux auxquels le langage naturel peut être « produit » par un système de dialogue : (i) le niveau logique instantié dans un contrôleur de dialogue et ne faisant pas partie du générateur, mais fournissant l'intention communicationnelle à mettre sous forme linguistique, (ii) le niveau pragmatique gérant les aspects liés à l'expressivité des énoncés et à leur pertinence par rapport au contexte dialogique, (iii) le niveau linguistique produisant le texte pour l'intention communicationnele, (iv) le niveau expressif calculant la forme finale de l'énoncé et la prosodie, et (v) le niveau acoustique réalisant la synthèse de la parole proprement dite.  L'architecture conçue pour la génération dans le cadre du dialogue homme-machine part d'un  ensemble de principes : 1. prendre en compte les aspects pragmatiques (rhétoriques - structuration discursive et expressifs - valences émotionnelles) et la gestion des tours de parole (dialogue oral spontané), ainsi que les particularités des locuteurs ; 2. considérer surtout les performances des agents du dialogue (en dépit des normes de compétence qui varient d'un contexte (social, situationnel, etc.) à l'autre et ne sont donc pas génériques) ; 3. s'appuyer sur un corpus de dialogues réels entre humains et entre homme et machine (en dépit des prescriptions grammaticales fixées a priori) pour contrôler les aspects linguistiques en génération ; 4. rendre les traitements appropriés à un fonctionnement en temps réel (et donc éviter des processus d'inférence relativement coûteux) ; 5. diminuer autant que possible la dépendance à la tâche et à la langue, en permettant des paramétrages aisés ; 6. rendre les niveaux de traitement de la parole aussi indépendants que possible des traitements purement textuels.  Le premier point des désidérata ci-dessus est réalisé dans le générateur pragmatique, où les  aspects rhétoriques-discursifs sont gérés par l'utilisation adaptée de la théorie SDRT (« Segmented Discourse Representation Theory ») (Asher & Lascarides, 2003), tandis que les aspects expressifs au niveau de chaque énoncé sont gérés par le contrôle du « degré de puissance de la force illocutoire ». De plus, on prévoit la prise en compte, dans le générateur pragmatique, d'un doublet d'attributs caractérisant chaque partenaire du dialogue (en termes de niveau de familiarité par rapport au dialogue courant et de relation sociale de l'un avec l'autre).  Le cinquième point est réalisé par le fait que, autant au niveau pragmatique que linguistique, les  méthodes utilisées sont indépendantes de la tâche et de la langue (supposant en fin de compte  des traitements du type appariement des graphes) et paramétrables dans une langue et pour une  tâche données.  Le sixième point est réalisé par l'utilisation d'un format standard pour la représentation des  connaissances (XML) et d'une théorie de représentation pragmatique-discursive dont le formalisme « interne » n'est pas pris en compte (la SDRT - « Segmented Discourse Representation Theory », dont on ne prend en compte que les relations rhétoriques et leurs sémantiques informelles).  L'idée de concevoir une architecture pour la génération du langage naturel a été déjà énoncée  dans plusieurs études, comme celle de Reiter et Dale (Reiter & Dale, 2000) et l'architecture RAGS (Mellish et al., 2006). Mais aucun de ces deux modèles ne traite le dialogue hommemachine. Il existe peu de travaux pour définir une architecture adaptée pour la génération en dialogue (Imberdis & Caelen, 1997), (McTear, 2002).  D'autres travaux ont abordé la génération en dialogue de diverses façons, dont les plus notables  sont, à notre sens, ceux d'Amanda Stent (Stent, 2001), de Mariet Theune (Theune, 2000) et de Matthew Stone (Stone, 1998), puisqu'ils sont explicitement concernés par le dialogue oral homme-machine, aboutissant en même temps à des systèmes fonctionnels. Ces démarches ne sont pas génériques, sont sans référence à un « standard » en génération (tels que l'architecture de Reiter et Dale ou le modèle RAGS). Cela implique le manque de portabilité et de réutilisation de ces systèmes. Notre architecture proposée ici est fortement compatible à la fois avec le propos de Reiter et Dale et avec le modèle RAGS. Pour l'utilisation de la SDRT en génération en situations de monologues, les travaux de Laurence Danlos et son équipe peuvent être citées (Danlos et al., 2001) ; pour des extensions de la SDRT pour l'interprétation des dialogues, les travaux de Laurent Prévot (Maudet et al., 2004) et son équipe sont intéressants, mais ne concernent pas la génération. Dans ce contexte, les travaux assumés par notre projet essaient de renforcer les recherches en génération pour le dialogue homme-machine finalisé.  Le schéma global de l'architecture est illustré dans la figure 1, où on met en évidence la relation  entre les niveaux de traitement, les modules (générateurs) et les connaissances échangées entre les modules et implicitement entre les niveaux.  Sur cette figure les modules de traitement sont représentés par des rectangles et les structures  de données par des ellipses. A droite, les flèches doubles montrent les niveaux de traitement, tandis qu'à gauche, les flèches situent l'architecture proposée ici par rapport à l'architecture de référence de Reiter et Dale (Reiter & Dale, 2000), qui représente une première spécification, plutôt théorique, d'une architecture pour la génération du langage naturel. Les interfaces entre les modules de génération sont spécifiées en XML et les choix de conception pour notre architecture ont été décrites de manière étendue dans (Popescu et al., 2007). Le modèle RAGS est décrit dans (Mellish et al., 2006). Les entités dénommées « primitives abstraites » à un niveau de traitement dans la description du modèle RAGS ci-dessus sont en fait des pointeurs renvoyant vers les représentations les plus complexes au niveau inférieur ; par exemple, la primitive RhetLeaf au niveau rhétorique renvoie vers une structure sémantique, SemRep.  Le modèle RAGS spécifie une architecture « pipeline », permettant des raccourcis entre les  niveaux de représentation, via les flèches non-locales (Mellish et al., 2006). Donc, la double incidence du niveau expressif à d'autres niveaux de traitement est compatible en théorie et en  pratique avec RAGS.   Les correspondances entre RAGS et notre architecture sont montrées dans la figure 1, où les  connaissances transférées dans le modèle RAGS sont des primitives (dans le cas de KBId et Quote) où des représentations dérivées (pour le reste - cf. la discussion ci-dessous).  L'architecture proposée ici et son parallèle, l'architecture RAGS sont comparés ci-dessous.   Ainsi, le niveau logique de notre architecture correspond au niveau conceptuel du modèle RAGS  seulement du point de vue de la génération, car le générateur logique (en fait, le contrôleur de dialogue) a un rôle plus étendu que le niveau conceptuel de RAGS. C'est pour cela que le niveau logique ne fait pas à vrai dire partie de notre architecture, mais représente seulement l'interface du système de génération au contexte dialogique.  Le niveau pragmatique de notre architecture correspond au niveau rhétorique de RAGS et au  niveau documentaire de ce dernier, car notre générateur pragmatique assure la situation et la cohérence rhétorique de l'acte de langage à engendrer, en fournissant en même temps une représentation qui constitue une structuration discursive.  Le niveau linguistique de notre architecture correspond à trois niveaux de RAGS : les niveaux   sémantique, syntaxique et citationnel.  Quant aux niveaux expressif et acoustique de notre architecture, ceux-ci n'ont pas de correspondants en RAGS car le côté prosodie et synthèse de parole représente un aspect de la génération dont RAGS ne rend pas compte. RAGS est concerné seulement avec l'obtention du texte comme résultat final du processus de génération.  En conclusion, on observe que l'architecture, bien qu'elle s'appuie sur d'autres architectures  de référence, soit plus théoriques comme celle de Reiter et Dale, soit plus orientées logiciel, comme RAGS, reste particulière dans les détails fins. Nous discutons maintenant de l'isomorphisme entre les représentations de RAGS et les représentations de notre architecture, en nous appuyant sur un exemple de représentations dans le modèle RAGS et dans notre architecture.  Nous illustrons cela autour d'un exemple pour la représentation rhétorique correspondante à un  dialogue court entre deux locuteurs, ayant comme objet l'établissement d'un rendez-vous :  U  :  : Quand es-tu disponible aujourd'hui ?  M  :  : Je suis disponible aujourd'hui dès 16h !  Ainsi, en employant une formalisation rhétorique à la SDRT (Asher & Lascarides, 2003), on  suppose que les générateurs doivent représenter la structuration rhétorique du dialogue indiqué ci-dessus.  Pour ce texte, la représentation rhétorique  RhetRep que le niveau rhétorique de RAGS construit dans son langage interne est montrée dans la figure 2, à côté de la représentation issue de notre architecture, dans le cadre de la SDRT. Les conventions de représentation pour le RAGS sont les suivantes (Mellish et al., 2006) : (i) les noeuds sont des objets qui représentent des structures et des sous-structures (types primitifs) ; à chaque objet on associe un type RAGS (de ceux définis dans le modèle) ; de ces types, seulement les types primitifs spécifient des informations se reportant à la théorie choisie pour concrétiser l'architecture abstraite de RAGS, et (ii) les flèches entre les objets représentent les relations entre ces derniers ; pour chaque flèche il existe une et seulement une source et une cible ; en même temps, chaque flèche est désignée par une étiquette unique. De plus, les flèches sont typées, dans le sens que pour chaque étiquette il y a un unique type pour la source et un type toujours unique pour la cible ; ces types sont précisés lors de la définition de chaque flèche, donc, immuables. En revanche, pour la représentation de notre architecture, la notation « > » sépare deux éléments en structure arborescente, tandis que « : : » sépare un élément (à gauche) d'un attribut des siens propres.  On peut voir le texte ci-dessus relié par la relation discursive SDRT QAP (« Question - Answer  Pair »), dont la représentation RAGS est illustrée dans la figure 2.  La représentation XML correspondant à la représentation de la figure 2, pour cet exemple, est  donnée dans la figure 3.  La figure 4 montre un ensemble de règles permettant le passage de la représentation rhétorique  de RAGS à la représentation utilisée en sortie du module pragmatique de notre architecture ; on utilise les mêmes notations concernant « > » et « : : ».  Cet ensemble de règles montre que pour 23 des 34 règles il existe une correspondance entre  les éléments et attributs dans la représentation RAGS et dans notre architecture, donc il y a une superposition de 2/3 entre les représentations dans les deux architectures au sens où la représentation dans notre architecture couvre 2/3 de la représentation équivalente en RAGS. Le reste comprend surtout des informations d'identification interne des structures de données, ce qui n'est pas nécessaire dans notre architecture, car elle est conçue pour le dialogue hommemachine où le système doit générer un tour de parole à un instant donné et non pas élaborer des discours monologiques étendus, où un plus fort repérage des structures linguistiques partielles est nécessaire dans le temps. Procédant à l'envers et construisant un ensemble de règles permettant de « traduire » la spécification XML des informations rhétoriques échangées entre les modules de génération pragmatique et linguistique en représentation selon le modèle RAGS on obtient une couverture de 5/6 selon un ensemble de règles semblables à ceux juste présentées ci-dessus. Le reste de 1/6 relève du manque de « transport » vers la représentation RAGS des marqueurs spécifiques au dialogue (l'identité des locuteurs et les marqueurs pragmatiques dialogiques - stratégie, acte de langage et force illocutoire). Ces informations peuvent cependant être récupérées au niveau des identifiants en RAGS, qu'une structure parallèle réalisant les correspondances appropriées peut accompagner, en tant que connaissances statiques sous forme de tableau de correspondances.  Dans cet article nous avons présenté une vue d'ensemble d'architecture  générique (dans le sens que les modules de traitement sont indépendants des interfaces entre eux), modulaire (dans le sens que les traitements dans un module sont indépendants des traitements dans les autres modules) et portable (dans le sens que même au niveau des interfaces les modules sont indépendants pourvu qu'on plonge les représentations des connaissances à chaque niveau de traitement dans une architecture standard en génération du langage naturel, telle que le modèle RAGS). Plus précisément, un exemple étendu où la représentation de l'interface entre les modules pragmatique et linguistique dans notre architecture, comportant des informations rhétoriques échan gées, a été plongée dans la représentation rhétorique, située au niveau conceptuel de traitement,  dans le modèle RAGS. Lors de cet exercice, rendu possible via un ensemble de règles transformationnelles, on a constaté que la « traduction » dans les deux formats de représentation n'est pas totale, mais conserve les éléments pertinents par rapport à la nature de l'échange, dans les deux sens, de notre architecture vers RAGS et à l'inverse. Ce résultat nous amène a démontrer la portabilité annoncée : les modules dans notre architecture peuvent être combinés ou « entrelacés » avec des modules conçus suivant les spécifications du modèle RAGS ; par exemple, on pourrait construire un système de génération du langage naturel ayant les niveaux logique et pragmatique de notre architecture, ayant aussi un niveau linguistique éclaté en niveaux sémantique, syntaxique et citationnel d'un module de génération suivant les spécifications du modèle RAGS.  On a donc présenté une architecture qui étend un modèle de génération automatique des textes  (RAGS) au dialogue oral homme-machine, en gardant, dans une mesure importante, la compatibilité entre les deux.  Nous envisageons de concevoir des algorithmes pour l'obtention automatique des règles de  traduction entre notre architecture et le modèle RAGS ; ceci peut se réaliser en principe par l'appariement d'arbres XML pour les représentations dans les deux architectures ; la suite des transformations d'un arbre vers l'autre constitue l'ensemble des règles. Evidemment, les démarches décrites dans cet article concernant l'interface entre les niveaux pragmatique et linguistique dans notre architecture et, respectivement, l'interface entre les niveaux rhétorique et sémantique dans le modèle RAGS doivent être étendues aux autres interfaces entre les modules des deux architectures.  L'auteur remercie vivement Jean Caelen, du Laboratoire d'Informatique de Grenoble, pour ses  conseils attentifs et pour son apport aux travaux présentés dans cet article.  
